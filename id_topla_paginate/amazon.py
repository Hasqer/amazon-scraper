from selectorlib import Extractor
import requests
import random
from time import sleep


count = 0
proxy_count = 0

# Create an Extractor by reading from the YAML file
e = Extractor.from_yaml_file('selectors.yml')

proxy_list = ['138.201.113.2:3128', '154.65.39.7:80', '160.72.82.101:80', '3.226.168.144:80', '103.168.53.53:41367', '72.170.220.17:8080', '80.232.242.125:9002', '103.77.60.14:80', '103.83.232.122:80', '1.64.165.40:80', '116.203.28.43:80', '217.76.50.200:8000', '77.73.241.154:80', '47.56.110.204:8989', '103.129.92.95:9995', '135.125.161.112:80', '103.141.142.102:41367', '207.2.120.61:80', '34.146.64.228:3128', '34.170.89.64:80', '65.108.9.181:80', '133.18.234.13:80', '47.88.3.19:8080', '50.222.212.255:80', '46.101.239.193:80', '82.71.196.177:8080', '8.219.97.248:80', '146.71.79.39:80', '176.126.70.112:80', '103.167.134.31:80', '20.157.194.61:80', '136.243.55.199:3128', '59.124.240.22:3128', '65.21.242.89:4444', '203.198.207.253:80', '200.105.215.22:33630', '143.42.163.193:80', '13.81.217.201:80', '50.200.12.81:80', '47.74.152.29:8888', '50.222.212.250:80', '50.200.12.86:80', '164.132.170.100:80', '117.54.114.32:80', '103.72.79.211:80', '213.33.2.27:80', '50.217.29.198:80', '221.151.181.101:8000', '181.65.200.53:80', '24.205.201.186:80', '186.121.235.66:8080', '186.121.235.222:8080', '51.124.209.11:80', '171.22.25.170:80', '50.219.106.85:80', '96.113.159.162:80', '50.227.121.36:80', '80.228.235.6:80', '50.168.10.168:80', '185.140.53.137:80', '50.227.121.39:80', '50.221.203.209:80', '50.237.89.164:80', '50.168.72.113:80', '50.230.222.202:80', '107.1.93.220:80', '207.2.120.51:80', '50.169.91.138:80', '50.206.25.104:80', '50.171.32.224:80', '50.221.227.130:80', '60.52.61.38:80', '50.171.1.222:80', '75.89.101.62:80', '50.227.121.33:80', '50.219.71.160:80', '85.8.68.2:80', '50.221.203.195:80', '50.206.25.107:80', '50.168.72.114:80', '50.237.89.161:80', '50.200.12.84:80', '50.228.141.96:80', '50.169.62.110:80', '50.206.25.106:80', '50.228.141.102:80', '50.169.62.107:80', '107.1.93.214:80', '32.223.6.94:80', '50.174.7.156:80', '50.122.86.118:80', '50.206.25.111:80', '194.158.203.14:80', '96.113.158.126:80', '127.0.0.7:80', '68.185.57.66:80', '50.171.32.229:80', '5.189.184.6:80', '50.221.230.186:80', '212.145.210.146:80', '191.102.49.253:8080', '103.165.155.61:1111', '138.97.118.126:8080', '125.25.33.14:8080', '103.216.48.118:8080', '102.129.157.7:8080', '203.112.74.35:8080', '13.95.173.197:80', '107.1.93.215:80', '50.237.89.165:80', '172.108.208.74:80', '50.200.12.82:80', '50.218.57.67:80', '50.168.163.183:80', '50.174.7.153:80', '35.213.91.45:80', '20.24.43.214:80', '50.221.203.210:80', '144.86.187.35:3128', '50.217.153.79:80', '50.228.141.99:80', '50.218.57.71:80', '47.88.62.42:80', '50.223.129.109:80', '103.49.202.252:80', '50.173.140.147:80', '50.221.203.218:80', '50.217.226.45:80', '50.207.199.82:80', '190.103.177.131:80', '50.169.62.104:80', '50.237.89.170:80', '50.171.2.11:80', '50.168.163.177:80', '107.1.93.217:80', '50.175.31.244:80', '50.168.10.162:80', '113.161.131.43:80', '121.1.41.162:111', '178.21.163.24:80', '50.207.199.84:80', '50.206.111.89:80', '107.1.93.208:80', '50.219.106.81:80', '134.195.101.34:8080', '50.218.57.69:80', '50.217.153.75:80', '50.218.57.66:80', '169.55.89.6:80', '91.107.140.81:80', '50.221.166.2:80', '50.222.245.43:80', '123.202.159.108:80', '139.59.185.244:80', '50.204.219.228:80', '43.130.156.214:80', '50.174.7.158:80', '50.218.57.68:80', '47.251.48.42:8888', '107.1.93.210:80', '50.217.226.41:80', '50.217.226.44:80', '107.1.93.213:80', '107.1.93.223:80', '107.1.93.209:80', '146.59.199.12:80', '50.219.207.198:80', '20.210.113.32:80', '216.137.184.253:80', '50.217.153.73:80', '123.30.154.171:7777', '50.172.23.10:80', '50.174.7.162:80', '50.206.111.90:80', '50.207.199.81:80', '50.202.75.26:80', '50.219.106.83:80', '202.5.16.44:80', '50.218.57.70:80', '129.153.157.63:3128', '50.174.7.157:80', '20.44.206.138:80', '43.130.150.222:80', '50.169.62.111:80', '207.2.120.19:80', '60.52.61.36:80', '194.182.163.117:3128', '135.181.53.229:80', '103.127.1.130:80', '138.68.60.8:8080', '103.118.78.194:80', '103.76.151.90:8080', '180.183.1.175:8080', '103.1.94.113:1427', '137.74.65.101:80', '35.240.156.235:8080', '64.176.5.119:80', '152.67.103.55:8080', '119.8.100.157:8080', '172.245.159.177:80', '162.223.94.163:80', '109.194.101.128:3128', '34.143.228.238:8080', '123.205.24.240:80', '112.217.162.5:3128', '176.165.55.74:80', '209.97.150.167:3128', '3.213.212.136:80', '58.27.59.249:80', '167.99.124.118:80', '103.234.55.173:80', '47.74.226.8:5001', '187.217.54.84:80', '167.71.5.83:8080', '60.52.61.39:80', '219.68.43.251:80', '144.86.187.38:3128', '137.184.41.250:80', '117.251.103.186:8080', '64.225.4.29:9865', '51.15.242.202:8888', '162.223.94.164:80', '154.65.39.8:80', '64.225.8.82:9981', '110.34.3.229:3128', '190.104.168.19:80', '178.33.3.163:8080', '202.86.138.18:8080', '154.40.60.198:80', '152.228.217.116:80', '103.168.53.157:41485', '107.174.186.161:80', '103.179.190.121:80', '157.245.27.9:3128', '104.207.131.40:80', '34.36.96.83:3128', '212.107.31.118:80', '105.16.115.202:80', '146.83.128.23:80', '34.88.86.0:8888', '198.49.68.80:80', '173.176.14.246:3128', '103.149.130.38:80', '23.94.216.233:5000', '77.52.187.212:8085', '171.227.172.195:4007', '45.180.16.210:9292', '61.8.77.3:8088', '103.177.176.64:4343', '202.12.80.15:83', '143.198.209.149:8000', '36.92.70.209:8080', '103.118.44.213:8080', '185.15.172.212:3128', '191.243.46.18:43241', '41.65.201.36:1981', '50.171.68.130:80', '50.171.2.12:80', '50.171.32.222:80', '50.171.32.226:80', '50.173.140.146:80', '107.1.93.218:80', '41.230.216.70:80', '50.168.49.106:80', '50.207.199.86:80', '50.171.32.231:80', '50.228.128.26:80', '50.237.207.186:80', '50.221.203.222:80', '107.1.93.221:80', '50.221.203.219:80', '50.217.153.77:80', '190.58.248.86:80', '50.219.71.165:80', '77.62.171.241:80', '213.33.126.130:80', '50.217.153.78:80', '50.204.219.229:80', '50.174.145.15:80', '50.220.21.202:80', '50.168.34.138:80', '50.171.2.8:80', '201.148.32.162:80', '50.237.89.166:80', '85.26.146.169:80', '50.228.141.101:80', '50.239.72.16:80', '50.175.31.243:80', '50.168.49.105:80', '50.173.157.75:80', '50.200.12.85:80', '50.170.90.28:80', '80.120.130.231:80', '50.168.72.122:80', '50.223.129.111:80', '50.231.110.26:80', '41.207.187.178:80', '107.1.93.211:80', '50.171.32.225:80', '50.221.203.193:80']


def get_user_agent():
    import random

    os = [
        'Macintosh; Intel Mac OS X 10_15_7',
        'Macintosh; Intel Mac OS X 10_15_5',
        'Macintosh; Intel Mac OS X 10_11_6',
        'Macintosh; Intel Mac OS X 10_6_6',
        'Macintosh; Intel Mac OS X 10_9_5',
        'Macintosh; Intel Mac OS X 10_10_5',
        'Macintosh; Intel Mac OS X 10_7_5',
        'Macintosh; Intel Mac OS X 10_11_3',
        'Macintosh; Intel Mac OS X 10_10_3',
        'Macintosh; Intel Mac OS X 10_6_8',
        'Macintosh; Intel Mac OS X 10_10_2',
        'Macintosh; Intel Mac OS X 10_10_3',
        'Macintosh; Intel Mac OS X 10_11_5',
        'Windows NT 10.0; Win64; x64',
        'Windows NT 10.0; WOW64',
        'Windows NT 10.0',
    ]
    return f"Mozilla/5.0 ({os[random.randint(0, len(os) - 1)]}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{random.randint(85, 87)}.0.{random.randint(4100, 4289)}.{random.randint(140, 189)} Safari/537.36"


fakeHeader = {
    'user-agent': get_user_agent(),
    'accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'accept-language': 'en-US,en;q=0.9',
    'accept-encoding': 'gzip, deflate, br',
    'downlink': str(random.randint(10, 39)),
    'rtt': str(random.randint(50, 149)),
    'ect': '4g',
    'pragma': 'no-cache'
}


def scrape(url, proxy, headers):
    # Download the page using requests
    print('Downloading %s' % url)
    # r = requests.get(url, headers=headers, prox)
    r = requests.get(url, headers=headers, proxies=proxy, timeout=10)
    # Simple check to check if page was blocked (Usually 503)
    if r.status_code > 500:
        if 'To discuss automated access to Amazon data please contact' in r.text:
            print('Page %s was blocked by Amazon. Please try using better proxies\n' % url)
        else:
            print('Page %s must have been blocked by Amazon as the status code was %d' % (url, r.status_code))
        return None
    return e.extract(r.text)


# GOOGLE CHECK
# while True:
#     with open('output.txt', 'r') as idlist, open('output.txt', 'a') as file:
#         try:
#             for id in idlist:
#                 data = scrape('https://google.com', {'http': proxy_list[proxy_count]})
#                 print(proxy_count)
#                 if data['google_check']:
#                     print('iyi proxy bulduk')
#                     print(data['google_check'])
#                     file.write(proxy_list[proxy_count])
#                     file.write('\n')
#                 proxy_count += 1
#         except IndexError:
#             sleep(5)


while True:
    with open('output.txt', 'r') as idlist, open('output.txt', 'a') as outfile, open('amazon_proxies.txt',
                                                                                     'a') as proxyfile:
        id_list = idlist.read().splitlines()
        count = random.randrange(0, len(id_list) - 2, 1)
        success_count = 0
        for id in id_list:
            data = scrape(f'https://www.amazon.com/dp/{id_list[count]}', proxy={'http': proxy_list[proxy_count]},
                          headers=fakeHeader)
            sleep(3)
            if proxy_count == len(proxy_list) - 1:
                proxy_count = 0
            else:
                proxy_count += 1
            if data:
                try:
                    if success_count > 5:
                        sleep(1800)
                        success_count = 0
                    status = False
                    for id in data['links']:
                        if '/dp/' in id:
                            new_id = id.split('/dp/')[-1].split('?')[0].split('/')[0]
                            if new_id not in id_list:
                                status = True
                                outfile.write(new_id)
                                id_list.append(new_id)
                                outfile.write('\n')
                                print(f'{count}. id\'deyiz          BAŞARILI')

                    if status:
                        success_count += 1
                    print(f'{status} ve {success_count}')
                    count += 1
                    sleep(300)
                except TypeError:
                    print(f'{count}. id\'deyiz          Recaptcha! Proxy değiştiriyoruz {proxy_count}')
                    sleep(3)

              